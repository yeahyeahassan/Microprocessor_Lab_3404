# 🌟 Experiment 1: Blinking LEDs 🌟
### *(Simulation in Proteus and Practical Implementation in the STM32 Blue Pill)*

---

## 📝 Introduction:

- Briefly introduce the concept of blinking LEDs, highlighting their applications in embedded systems and electronics projects.
- Mention the chosen simulation software **(Proteus)** and hardware platform **(STM32 Blue Pill)** and their suitability for this project.
- Provide an overview of the report's structure and key objectives.

---

## 🔧 Components:

### 1. Gather Hardware:

- STM32 Blue Pill development board 🛠️
- LED (standard or RGB, depending on your preference) 💡
- Resistor (220-ohm or adjusted based on LED specs) ⚡
- Breadboard or jumper wires 🔌
- USB cable 🔗
- Power supply (3.3V or 5V, depending on your board and LED) 🔋

### 2. Connect the Components:

- Mount the Blue Pill on the breadboard or connect it using jumper wires.
- Connect the LED.

---

## 🚦 OUTCOME:

- When the switch is **KEPT open**, i.e., the input pin is **CONTINUOUSLY HIGH**, the LED with Pin 6 will **glow continuously** and that with Pin 7 will **toggle at every 100 mS**.
- When the switch is **KEPT closed**, i.e., the input pin is **CONTINUOUSLY LOW**, the LED with Pin 6 will **toggle at every 100 mS** and that with Pin 7 will **glow continuously**.

---

## 🔄 Configuration and Connections:

- During configuration, High-Speed Clock under RCC within System Core should be set at **"Crystal/ceramic resonator"**.
- In clock configuration, set the frequency at **72MHz**.
- **Pin 6 and Pin 7** of Port A will be set as **Output** and **Pin 9** of the same port as **Input Pin**.
- **Internal Pull-up** should be chosen for the input pin [from GPIO setting in System Core].
- Two sets of a combination of one LED with a **330 ohms resistor** should be connected both with **Pin 6 and Pin 7**. One switch is connected between **Pin 9 and Ground**.

---

## 🛠️ Working Process of Blinking LEDs:

### 1. Proteus Simulation:

#### 1.1 Component Selection:

- Open Proteus and add the **STM32F4 Discovery board** or a similar development board matching your Blue Pill's specifications.
- Place two LEDs and appropriate resistors (usually 220-330 ohms) in series with each LED to limit current and prevent damage. Connect the anode (longer leg) of each LED to a GPIO pin, and the cathode (shorter leg) to ground.

#### 1.2 Schematic Creation:

- Connect the necessary power supplies **(VDD and GND)** to the board.
- Create connections between the board's components **(MCU, LEDs, resistors)** using wires.

#### 1.3 Code Development:

- Write C code (using an IDE like **Keil MDK-ARM** or **STM32CubeIDE**) to configure the GPIO pins as outputs.

#### 1.4 Simulation:

- Compile and download the code to the simulated STM32 board.
- Run the simulation. You should see the LEDs blinking on and off in the Proteus environment.

### 2. Practical Implementation on STM32 Blue Pill:

#### 2.1 Hardware Setup:

- Connect the Blue Pill to your computer using a USB cable and a suitable programmer/debugger (**ST-LINK V2, Black Magic Probe**, etc.).
- Connect the LEDs and resistors as in the simulation, matching the GPIO pin connections in your code. Ensure correct power supply connections.

#### 2.2 Code Upload:

- Use your chosen IDE to compile and upload the code to the Blue Pill.

#### 2.3 Observation:

- If everything is connected and programmed correctly, you should see the LEDs blinking on the physical Blue Pill board.

---

## 📊 Conclusion:

- Summarize the key findings and achievements of the project.
- Discuss any challenges encountered and solutions implemented.
- Suggest potential improvements or extensions for future work.
- Express your overall takeaways and learnings from the project.
